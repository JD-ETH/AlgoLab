//============================================================================
// Name        : SecretService.cpp
// Author      :
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================
#include <vector>
#include <algorithm>
#include <string>
#include <boost/graph/adjacency_list.hpp>
#include <boost/graph/dijkstra_shortest_paths.hpp>
#include <boost/graph/max_cardinality_matching.hpp>
#include <iostream>
#include <climits>
using namespace std;
using namespace boost;

typedef adjacency_list<vecS, vecS, directedS,
	no_propertym
	property<edge_weight_t,int> > Graph;
typedef graph_traits<Graph>::vertex_descriptor Vertex;
typedef graph_traits<Graph>::edge_descriptor Edge;
typedef property_map<Graph,edge_weight_t>::type WeightMap;

void do_case(){
	// Read
	int n,m,a,s,c,d;
	cin >> n >> m >> a >> s >> c >> d;
	Graph G(n);
	vector<int> agents(a);
	vector<int> shelters(s);
	vector<vector<int> > age_to_shelters(a,vecotr<int>(s,-1));
	WeightMap weightmap = get(edge_weight,G);
	while (m--){
		Edge e; bool success;
		char ch;
		cin >> ch;
		int u,v,w;
		cin >> u >> v >> w;
		if (ch == 'S') {
			tie(e,success) = add_edge(u,v,G);
			weightmap[e] = w;
		}
		else {
			tie(e,success) = add_edge(u,v,G);
			weightmap[e] = w;
			tie(e,success) = add_edge(v,u,G);
			weightmap[e] = w;
		}
		for (int i = 0; i < a; i ++) cin >> agents[i];
		for (int i = 0; i < s; i ++) cin >> shelters[i];

		// First solve the dijstra path problem multiple times
		for (int i = 0; i < a ; i ++){
			vector<Vertex> predmap(n);
			vector<int> distmap(n);
			Vertex start = agents[i];
			dijkstra_shortest_paths(G, start, // We MUST provide at least one of the two maps
				predecessor_map(make_iterator_property_map(predmap.begin(), get(vertex_index, G))).	// predecessor map as Named Parameter
				distance_map(make_iterator_property_map(distmap.begin(), get(vertex_index, G))));	// distance map as Named Parameter
			for (int j = 0; j < s ; j ++){
				int ind = shelters[j];
				if ( distmap[ind] < INT_MAX) age_to_shelters[i][j] = distmap[ind];
			}
		}

		// Find the shortest time




}
int main() {
	int t;
	cin >> t;
	while(t--){
		do_case();
	}
	return 0;
}


#include <iostream>
#include <vector>
#include <map>
#include <algorithm>
#include <boost/graph/adjacency_list.hpp>
#include <boost/graph/push_relabel_max_flow.hpp>
#include <boost/graph/edmonds_karp_max_flow.hpp>

using namespace std;
using namespace boost;

typedef adjacency_list_traits<vecS, vecS, directedS> Traits;
typedef adjacency_list<vecS, vecS, directedS, no_property,
		property<edge_capacity_t, long,
				property<edge_residual_capacity_t, long,
						property<edge_reverse_t, Traits::edge_descriptor> > > > Graph;
typedef property_map<Graph, edge_capacity_t>::type EdgeCapacityMap;
typedef property_map<Graph, edge_residual_capacity_t>::type ResidualCapacityMap;
typedef property_map<Graph, edge_reverse_t>::type ReverseEdgeMap;
typedef graph_traits<Graph>::vertex_descriptor Vertex;
typedef graph_traits<Graph>::edge_descriptor Edge;
int m,n,k,C;
class EdgeAdder {
	Graph &G;
	EdgeCapacityMap &capacitymap;
	ReverseEdgeMap &revedgemap;

public:
	EdgeAdder(Graph &G, EdgeCapacityMap &capacitymap,
			ReverseEdgeMap& revedgemap) :
			G(G), capacitymap(capacitymap), revedgemap(revedgemap) {
	}

	void addEdge(int from, int to, long capacity) {
		Edge e, reverseE;
		bool success;
		tie(e, success) = add_edge(from, to, G);
		tie(reverseE, success) = add_edge(to, from, G);
		capacitymap[e] = capacity;
		capacitymap[reverseE] = 0;
		revedgemap[e] = reverseE;
		revedgemap[reverseE] = e;
	}
};
// Seperate incoming and outgoing flows
void do_case() {
	cin >> m >> n >> k >> C;
	int mn = m*n;
	if (mn == 0) {
		cout << 0 << endl;
		return;
	}
	Graph G(2*mn);
	EdgeCapacityMap capacitymap = get(edge_capacity, G);
	ReverseEdgeMap revedgemap = get(edge_reverse, G);
	ResidualCapacityMap rescapacitymap = get(edge_residual_capacity, G);
	EdgeAdder eaG(G, capacitymap, revedgemap);
	Vertex src = add_vertex(G);
	Vertex sink = add_vertex(G);
	// The Graph s-> all nodes in -> all nodes out -> t
	// First construct connectivity
	// 0...mn-1 incoming, mn,...2mn-1 outgoing
	for (int i = 0; i < m; i++){
		for (int j = 0; j < n ; j++){
			int curr = i+m*j;
			eaG.addEdge(curr,curr+mn,C);// Between in and out node
			if (i+1 < m ) { // Horizontal connections
				eaG.addEdge(curr+1+mn,curr,1);
				eaG.addEdge(curr+mn, curr+1,1);
			}

			if (j+1 < n ) { // vertical connections
				eaG.addEdge(curr+mn+m,curr,1);
				eaG.addEdge(curr+mn, curr+m,1);
						}
		}
	}

	for (int i = 0; i<m;i++){ // Upmost and lowest row connect to sink
		eaG.addEdge(i+mn,sink,1);
		eaG.addEdge(i+mn+(n-1)*m,sink,1);
	}

	for (int j = 0; j<n;j++){ // Left and Right column connect to sink
		eaG.addEdge(j*m+mn,sink,1);
		eaG.addEdge(j*m+n-1+mn,sink,1);
	}

	while(k--){
		cout << "x" << endl;
		int u,v;
		cin >> u >> v;
		eaG.addEdge(src,u+v*m,1); // Connect to source
	}


	long flow = push_relabel_max_flow(G,src,sink);
//	long flow = edmonds_karp_max_flow(G, src, sink);

	cout << flow << endl;
}

int main() {
	ios_base::sync_with_stdio(false);
	int t;
	cin >> t;
	while (t--) {
		do_case();
	}
	return 0;
}


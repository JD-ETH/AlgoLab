//============================================================================
// Name        : FirstStep.cpp
// Author      : 
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================

#include <iostream>
#include <vector>
#include <boost/graph/adjacency_list.hpp>
#include <boost/graph/kruskal_min_spanning_tree.hpp>
#include <boost/graph/dijkstra_shortest_paths.hpp>

using namespace std;
using namespace boost;

typedef adjacency_list<vecS,vecS,undirectedS,
		no_property,
		property<edge_weight_t,int>
		>                              Graph;

//typedef graph_traits
typedef graph_traits<Graph>::vertex_descriptor Vertex;
typedef graph_traits<Graph>::edge_descriptor Edge;
typedef property_map<Graph, edge_weight_t>::type WeightMap;


void do_case(){
	int V,E;
	cin >> V >> E;
	Graph G(V);
	WeightMap weightmap = get(edge_weight,G);

	//Read input
	for ( int i = 0; i < E; i++){
		Edge e;
		bool success;
		Vertex u,v;
		int w;
		cin >> u >> v >> w;
		tie(e,success) = add_edge(u,v,G);
		weightmap[e] = w;
	}

	// The minimum spanning tree under Kruskal
	vector<Edge> mst;
	vector<Vertex> kruskalpredmap(V);
	vector<int> rankmap(V);
	kruskal_minimum_spanning_tree(G,back_inserter(mst),
			rank_map(make_iterator_property_map(rankmap.begin(),get(vertex_index,G))).
			predecessor_map(make_iterator_property_map(kruskalpredmap.begin(),get(vertex_index,G))));
	int totweight=0;
	vector<Edge>::iterator mstbeg,mstend=mst.end();
	for(mstbeg=mst.begin();mstbeg!=mstend; ++mstbeg){
		totweight += weightmap[*mstbeg];
	}
}
int main() {
	int t;
	cin>> t;
	while(t--){
		do_case();
	}
	return 0;
}

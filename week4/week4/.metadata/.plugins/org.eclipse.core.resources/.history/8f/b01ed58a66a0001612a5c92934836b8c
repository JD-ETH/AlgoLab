//============================================================================
// Name        : Ant.cpp
// Author      : 
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================

#include <iostream>
#include <vector>
#include <map>
#include <algorithm>
#include <boost/graph/adjacency_list.hpp>
#include <boost/graph/prim_minimum_spanning_tree.hpp>
#include <boost/graph/dijkstra_shortest_paths.hpp>

using namespace std;
using namespace boost;

typedef adjacency_list<vecS, vecS, undirectedS,
		no_property,
		property<edge_weight_t,int>
		>                                 Graph;
typedef graph_traits<Graph>::edge_descriptor Edge;
typedef graph_traits<Graph>::vertex_descriptor Vertex;
typedef graph_traits<Graph>::out_edge_iterator OutEdgeIt;
typedef graph_traits<Graph>::edge_iterator EdgeIt;
typedef property_map<Graph,edge_weight_t>::type WeightMap;

void do_case(){

	// read and construct graph
	int V,E,s,a,b;

	cin >> V >> E >> s >> a >> b;
	vector<map<Edge,int> > weights(s);
	map<Edge,vector<int> > candidate(E);

	Graph G(V);
	for (int i = 0; i < E; i ++){
		Edge e;
		Vertex u,v;
		bool success;
		cin >> u >> v;
		tie(e,success) = add_edge(u,v,G);
		for ( int j =0 ; j < s; j++) {
			int w;
			cin >> w;
			weights[j].insert(make_pair(e,w));
		}
		vector<int> vec;
		candidate.insert(make_pair(e,vec));
	}


	// Minimum spanning tree for every specy
	for ( int j = 0; j < s ; j ++){
		int hive;
		cin >> hive;
		vector<Vertex> primpredmap(V);
		prim_minimum_spanning_tree(G,make_iterator_property_map(primpredmap.begin(),get(vertex_index,G)),
				root_vertex(hive));
		for (int i = 0; i < V; ++i) {
				// OutEdgeIterators
				Vertex u = i;
				OutEdgeIt oebeg, oeend;
				for (tie(oebeg, oeend) = out_edges(u, G); oebeg != oeend; ++oebeg) {
					Vertex v = target(*oebeg, G);	// source(*oebeg, G) is guaranteed to be u, even in an undirected graph.
					if (primpredmap[u] == v) {
						candidate[*oebeg].push_back(weights[j][*oebeg]);
					}
				}
			}

	}


	// Finally assign the true value
	WeightMap weightmap = get(edge_weight, G);
	EdgeIt eit,eiend;
	for (tie(eit,eiend)=edges(G); eit!= eiend; ++eit){
		sort(candidate[*eit].begin(),candidate[*eit].end());
		weightmap[]
	}
}

int main() {
	int t;
	cin >> t;
	while(t--){
		do_case();
	}
	return 0;
}

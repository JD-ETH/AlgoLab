//============================================================================
// Name        : Ant.cpp
// Author      : 
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================

#include <iostream>
#include <vector>
#include <map>
#include <algorithm>
#include <boost/graph/adjacency_list.hpp>
#include <boost/graph/kruskal_min_spanning_tree.hpp>
#include <boost/graph/dijkstra_shortest_paths.hpp>

using namespace std;
using namespace boost;

typedef adjacency_list<vecS, vecS, undirectedS, no_property,
		property<edge_weight_t, int> > Graph;
typedef graph_traits<Graph>::edge_descriptor Edge;
typedef graph_traits<Graph>::vertex_descriptor Vertex;
typedef graph_traits<Graph>::edge_iterator EdgeIt;
typedef property_map<Graph, edge_weight_t>::type WeightMap;
void do_case() {

	// read and construct graph
	int V, E, s, a, b;

	cin >> V >> E >> s >> a >> b;
	vector<vector<int> > weights(s, vector<int>(E, -1));
	Graph G(V);
	Graph g(V);
	WeightMap weightmap = get(edge_weight, g);
	for (int i = 0; i < E; i++) {
		Edge e;
		Vertex u, v;
		bool success;
		cin >> u >> v;
		tie(e, success) = add_edge(u, v, g);
		for (int j = 0; j < s; j++) {
			cin >> weights[j][i];
		}
//		cout << weightmap[e];
	}

	// Minimum spanning tree for every specy
	int hive;
	for (int j = 0; j < s; j++) {

		cin >> hive;


	}

	// Finally assign the true weight



	// Dijkstra
	vector<Vertex> predmap(V);
	vector<int> distmap(V);

	dijkstra_shortest_paths(G,
			a, // We MUST provide at least one of the two maps
			predecessor_map(
					make_iterator_property_map(predmap.begin(),
							get(vertex_index, G))).	// predecessor map as Named Parameter
			distance_map(
					make_iterator_property_map(distmap.begin(),
							get(vertex_index, G))));// distance map as Named Parameter
	cout << distmap[b] << endl;
}

int main() {
	int t;
	cin >> t;
	while (t--) {
		do_case();
	}
	return 0;
}

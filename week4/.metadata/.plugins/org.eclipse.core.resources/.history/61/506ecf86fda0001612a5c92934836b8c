//============================================================================
// Name        : bridge.cpp
// Author      : 
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================

#include <iostream>
#include <algorithm>
#include <vector>
#include <boost/graph/adjacency_list.hpp>
#include <boost/graph/biconnected_components.hpp>
using namespace std;
using namespace boost;

namespace boost {
struct edge_component_t {
	enum {
		num = 555
	};
	typedef edge_property_tag kind;
} edge_component;
}

typedef adjacency_list<vecS, vecS, undirectedS, no_property,
		property<edge_component_t, int> > Graph;
typedef graph_traits<Graph>::edge_descriptor Edge;
typedef graph_traits<Graph>::vertex_descriptor Vertex;
typedef graph_traits<Graph>::edge_iterator EdgeIt;

void do_case() {
	// Read input
	int V, E;
	cin >> V >> E;
	Graph G(V);
//	vector<Edge> alledge;
	for (int i = 0; i < E; i++) {
		int u, v;
		cin >> u >> v;
		Edge e;
		bool suc;
		tie(e, suc) = add_edge(v, u, G);
//		alledge.push_back(e);
	}

	// Connected components calculation
	property_map<Graph, edge_component_t>::type component = get(edge_component,
			G);

	int num_comps = biconnected_components(G, component);
	if (num_comps == 1) {cout << 0 << "\n";return;}

	EdgeIt ebeg, eend;
	vector<pair<int, int> > sol(num_comps);
	vector<int> single(num_comps,0);

	for (tie(ebeg,eend) = edges(G);ebeg!=eend; ebeg++) {

		Vertex u = source(e, G), v = target(e, G);
		vector<int> componentmap(V); // We MUST use such a vector as an Exterior Property Map: Vertex -> Component
		int cc = connected_components(G,
				make_iterator_property_map(componentmap.begin(),
						get(vertex_index, G)));
		add_edge(u, v, G);
		sol.push_back(make_pair(min(u, v), max(u, v)));
//	}
	}
	cout << count << "\n";

// All briges
	sort(sol.begin(), sol.end());
	for (int i = 0; i < count; i++) {
		cout << sol[i].first << " " << sol[i].second << endl;
	}
}
int main() {
	int t;
	cin >> t;
	while (t--) {
		do_case();
	}
	return 0;
}

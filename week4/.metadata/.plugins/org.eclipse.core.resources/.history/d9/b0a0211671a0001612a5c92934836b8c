//============================================================================
// Name        : Ant.cpp
// Author      : 
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================

#include <iostream>
#include <vector>
#include <map>
#include <algorithm>
#include <boost/graph/adjacency_list.hpp>
#include <boost/graph/prim_minimum_spanning_tree.hpp>
#include <boost/graph/dijkstra_shortest_paths.hpp>

using namespace std;
using namespace boost;

typedef adjacency_list<vecS, vecS, undirectedS, no_property,
		property<edge_weight_t, int, property<edge_index_t, int> > > Graph;
typedef graph_traits<Graph>::edge_descriptor Edge;
typedef graph_traits<Graph>::vertex_descriptor Vertex;
typedef graph_traits<Graph>::out_edge_iterator OutEdgeIt;
typedef graph_traits<Graph>::edge_iterator EdgeIt;
typedef property_map<Graph, edge_weight_t>::type WeightMap;
typedef property_map<Graph, edge_index_t>::type EdgeID_Map;
void do_case() {

	// read and construct graph
	int V, E, s, a, b;

	cin >> V >> E >> s >> a >> b;
	vector<vector<int> > weights(s, vector<int>(E, -1));
	vector<vector<int> > candidate(E);

	Graph G(V);
	EdgeID_Map edge_id = get(edge_index, G);
	WeightMap weightmap = get(edge_weight, G);
	for (int i = 0; i < E; i++) {
		Edge e;
		Vertex u, v;
		bool success;
		cin >> u >> v;
		tie(e, success) = add_edge(u, v, G);
		edge_id[e] = i;
		for (int j = 0; j < s; j++) {
			int w;
			cin >> weights[j][i];
		}
		weightmap[e] = weights[0][i];
		vector<int> vec;
		candidate[i] = vec;
	}

	// Minimum spanning tree for every specy
	for (int j = 0; j < s; j++) {
		int hive;
		cin >> hive;
		EdgeIt eit, eiend;
		if (j != 0) {
			for (tie(eit, eiend) = edges(G); eit != eiend; ++eit) {
				weightmap[*eit] = weights[j][edge_id[*eit]];
			}
		}
		vector<Vertex> primpredmap(V);
		prim_minimum_spanning_tree(G,
				make_iterator_property_map(primpredmap.begin(),
						get(vertex_index, G)), root_vertex(hive));
		for (int i = 0; i < V; ++i) {
			// OutEdgeIterators
			Vertex u = i;
			OutEdgeIt oebeg, oeend;
			for (tie(oebeg, oeend) = out_edges(u, G); oebeg != oeend; ++oebeg) {
				Vertex v = target(*oebeg, G);// source(*oebeg, G) is guaranteed to be u, even in an undirected graph.
				if (primpredmap[u] == v) {
					int id = edge_id[*oebeg];
					candidate[id].push_back(weights[j][id]);
				}
			}
		}

	}

	// Finally assign the true weight

	EdgeIt eit, eiend;
	for (tie(eit, eiend) = edges(G); eit != eiend; ++eit) {
		int id = edge_id[*eit];
		sort(candidate[id].begin(), candidate[id].end());
		weightmap[*eit] = candidate[id].at(0);
	}

	// Dijkstra
	vector<Vertex> predmap(V);
	vector<int> distmap(V);
	Vertex start = a;
	dijkstra_shortest_paths(G,
			start, // We MUST provide at least one of the two maps
			predecessor_map(
					make_iterator_property_map(predmap.begin(),
							get(vertex_index, G))).	// predecessor map as Named Parameter
			distance_map(
					make_iterator_property_map(distmap.begin(),
							get(vertex_index, G))));// distance map as Named Parameter
	cout << distmap[b] << endl;
}

int main() {
	int t;
	cin >> t;
	while (t--) {
		do_case();
	}
	return 0;
}

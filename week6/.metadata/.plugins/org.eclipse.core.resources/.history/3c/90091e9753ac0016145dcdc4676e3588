//============================================================================
// Name        : hope.cpp
// Author      : 
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================

//============================================================================
// Name        : Coin.cpp
// Author      :
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================

#include <iostream>
#include <vector>
#include <map>
#include <set>
#include <algorithm>
using namespace std;

class node {
public:
	int index;
	int s;
	vector<int> sons;
	void add_son(int);
	vector<int> read_son();
	vector<vector<int> > own_supervision;
	vector<multimap<int, int> > external;
	vector<set<int> > supvisors;
	bool violet_own(int);
	vector<int> sup_out(int,int );
	bool violet(int , vector<int> );
	int leaf_score(int );
	int state_to_num(int );
};
bool node::violet(int state,vector<int> ext){
	if (violet_own(state)) return true;
	bool violet =false;

	return violet;
}
vector<int> node::sup_out(int state,int ind) {
	vector<int> ext_controlled;
	bool violet = false;
	// Find corresponding indices of troopers in other node
	for (int i = 0; i < s; i++) {
		if (state & 1 << i) {
			set<int>::iterator it = supvisors[ind].find(i);
			if (it!=supvisors[ind].end()){
				pair<multimap<int,int>,multimap<int,int> > ret;
				ret = external[i].equal_range(i);
				for (multimap<int,int>::iterator mit = ret.first; mit!= ret.second; ++mit){
					ext_controlled.push_back(mit->second);
				}
			}

		}
	}
	return ext_controlled;
}
int node::state_to_num(int state) {
	int num = 0;
	for (int i = 0; i < s; i++) {
		if (state & 1 << i)
			num++;
	}
	return num;
}

int node::leaf_score(int state) {
	int score;
	if (violet_own)
		score = 0;
	else
		score = state_to_num(state);
	return score;
}

bool node::violet_own(int state) {
	vector<int> controlled;
	bool violet = false;
	for (int i = 0; i < s; i++) {
		if (state & 1 << i)
			controlled.push_back(i);
	}
	for (int i = 0; i < controlled.size(); i++) {
		for (int j = 0; j < s; j++) {
			if (own_supervision[i][j]
					and (find(controlled.begin(), controlled.end(), j)
							!= controlled.end())) {
				// Found some j being controlled and is an edge
				return true;
			}
		}

	}
	return false;
}
static vector<vector<int> > memo;
static vector<node> nodes;

void node::add_son(int x) {
	sons.push_back(x);
}

vector<int> node::read_son() {
	return sons;
}

int solve(node &n, int take, vector<int> forbid) {
	// Take is 0 till 1<<14 means the current Trooper will be controlled
	int res = 0;
	int id = n.index;
	if (memo[id][take] == -1) {
		if (n.violet) { // invalid
			memo[id][take] = 0;
			return 0;
		}
		int num_sons = n.sons.size();
		if (num_sons == 0) {
//			cout << "Reached the leaf" << endl;
			res = n.leaf_score(take);
		} else {
			res += n.state_to_num(take);
			for (int i = 0; i < num_sons; i++) {
				int new_id = n.read_son().at(i);
				vector<int> supervised = n.sup_out(take);
				int one_child = 0;
				for (int j = 0; j < 1 << 14; j++) {
					one_child = max(one_child,
							solve(nodes[new_id], j, supervised));
				}
				res += one_child;
			}
		}
//		cout << "Assign new value " << res << "at: " << id << " " << take << endl;
		memo[id][take] = res;
	} else
		res = memo[id][take];

	return res;
}

void do_case() {
	int k, s, m;
	// easiest case 1
	cin >> k >> s >> m;
	nodes.clear();
	nodes.resize(k);
	memo.clear();
	memo.resize(k);
	for (int i = 0; i < k; i++) {
		nodes[i].s = s;
		nodes[i].index = i;
		memo[i] = vector<int>(2, -1);
		nodes[i].own_supervision = vector<vector<int> >(s, vector<int>(s, 0)); // Initilize sxs matrix
	}

	for (int i = 0; i < m; i++) {
		int u, v, h;
		cin >> u >> v >> h;
		if (u == v) {
			// In the same node
			while (h--) {
				int s1, s2;
				cin >> s1 >> s2;
				nodes[i].own_supervision[s1][s2] = 1;
				nodes[i].own_supervision[s2][s1] = 1;
			}
		} else {
			nodes[u].add_son(v);
			multimap<int, int> temp;
			set<int> sup;
			while (h--) {
				int s1, s2;
				cin >> s1 >> s2;
				temp.insert(s1, s2);
				sup.insert(s1);
			}
			nodes[i].supvisors.push_back(sup);
			nodes[i].external.push_back(temp);
		}

	}
	vector<int> empty;
	int score = 0;
	for (int j = 0; j < 1 << 14; j++) {
		score = max(score, solve(nodes[0], j, empty));
	}
	cout << score << endl;

}
int main() {
	ios_base::sync_with_stdio(false);
	int t;
	cin >> t;
	while (t--) {
		do_case();
	}
	return 0;
}

////============================================================================
//// Name        : hope.cpp
//// Author      :
//// Version     :
//// Copyright   : Your copyright notice
//// Description : Hello World in C++, Ansi-style
////============================================================================
//
////============================================================================
//// Name        : Coin.cpp
//// Author      :
//// Version     :
//// Copyright   : Your copyright notice
//// Description : Hello World in C++, Ansi-style
////============================================================================
//
//#include <iostream>
//#include <vector>
//#include <map>
//#include <algorithm>
//using namespace std;
//
//
//class node {
//public:
////	int level;
//	int index;
//	vector<int> sons;
//
////	void set_level(int);
////	int get_level();
//	void add_son(int);
//	vector<int> read_son();
//};
//
//
//static vector<vector<int > > memo;
//static vector<node> nodes;
//
//
//void node::add_son(int x){
//	sons.push_back(x);
//}
//
//vector<int> node::read_son(){
//	return sons;
//}
//
//int solve(node &n, int take){
//	// Take is 1 means the current Trooper will be controlled
//	int res = 0;
//	int id = n.index;
//	if (memo[id][take] == -1){
//		int num_sons = n.sons.size();
//		if (num_sons == 0) {
////			cout << "Reached the leaf" << endl;
//			res = take ? 1:0 ; // Leaf
//		}
//		else{
//			res +=take;
//			for (int i = 0; i < num_sons; i ++){
//				int new_id = n.read_son().at(i);
//				if (take) res+= solve(nodes[new_id],take^1);
//				else res+= max(solve(nodes[new_id],0),solve(nodes[new_id],1));
//			}
//		}
////		cout << "Assign new value " << res << "at: " << id << " " << take << endl;
//		memo[id][take] = res;
//	}
//	else res = memo[id][take];
//
//	return res;
//}
//
//void do_case(){
//	int k,s,m;
//	// easiest case 1
//	cin >> k >> s >> m;
//	nodes.clear();nodes.resize(k);
//	memo.clear();memo.resize(k);
//	for (int i= 0; i < k; i ++) {
//		nodes[i].index = i;
//		memo[i] = vector<int>(2,-1);
//	}
//
//	int ignore;
//	for (int i = 0; i < m; i ++){
//		int u,v,h;
//		cin >> u >> v >> h;
//		for (int j = 0; j < h; j++ ) cin >> ignore >> ignore;
//		nodes[u].add_son(v);
//
//	}
//
//	cout << max(solve(nodes[0],0),solve(nodes[0],1)) << endl;
//
//}
//int main() {
//	ios_base::sync_with_stdio(false);
//	int t;
//	cin >> t;
//	while (t--) {
//		do_case();
//	}
//	return 0;
//}
//
//
